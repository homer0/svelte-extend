[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/app/index.js",
    "content": "const fs = require('fs-extra');\nconst Jimple = require('jimple');\n\nconst { appLogger } = require('wootils/node/logger');\nconst services = require('../services');\n/**\n * The application main interface and dependency injection container.\n * @extends {Jimple}\n */\nclass SvelteExtend extends Jimple {\n  /**\n   * @ignore\n   */\n  constructor() {\n    super();\n\n    this.register(appLogger);\n    this.register(services.extender);\n    this.register(services.jsMerger);\n    this.register(services.sfcData);\n    this.register(services.sfcParser);\n  }\n  /**\n   * Extends an Svelte single file component that implements the `<extend />` tag.\n   * @param {String} contents     The contents of the file.\n   * @param {String} filepath     The path of the file.\n   * @param {Number} [maxDepth=0] How many components can be extended. For example, if a file\n   *                              extends from one that extends from another and the parameter\n   *                              is set to `1`, the parsing will fail.\n   * @return  {Promise<?String,Error>} If the file doesn't implement the `<extend />` tag, the\n   *                                   promise will resolve with `null`.\n   */\n  extend(contents, filepath, maxDepth = 0) {\n    return this.get('sfcParser').parse(\n      contents,\n      filepath,\n      maxDepth\n    )\n    .then((sfc) => (\n      sfc === null ?\n        contents :\n        this.get('extender').generate(sfc).render()\n    ));\n  }\n  /**\n   * Extends an Svelte single file component that implements the `<extend />` tag by using just\n   * its path; once the file is loaded, the method will internally call\n   * {@link SvelteExtend#extend}.\n   * @param {String} filepath     The path of the file.\n   * @param {Number} [maxDepth=0] How many components can be extended. For example, if a file\n   *                              extends from one that extends from another and the parameter\n   *                              is set to `1`, the parsing will fail.\n   * @return  {Promise<?String,Error>} If the file doesn't implement the `<extend />` tag, the\n   *                                   promise will resolve with `null`.\n   */\n  extendFromPath(filepath, maxDepth = 0) {\n    return fs.readFile(filepath, 'utf-8')\n    .then((contents) => this.extend(contents, filepath, maxDepth));\n  }\n}\n\nmodule.exports = SvelteExtend;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/app/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "SvelteExtend",
    "memberof": "src/app/index.js",
    "static": true,
    "longname": "src/app/index.js~SvelteExtend",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/app/index.js",
    "importStyle": "SvelteExtend",
    "description": "The application main interface and dependency injection container.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Jimple"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/app/index.js~SvelteExtend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~SvelteExtend#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "extend",
    "memberof": "src/app/index.js~SvelteExtend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~SvelteExtend#extend",
    "access": "public",
    "description": "Extends an Svelte single file component that implements the `<extend />` tag.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "The contents of the file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "maxDepth",
        "description": "How many components can be extended. For example, if a file\n                             extends from one that extends from another and the parameter\n                             is set to `1`, the parsing will fail."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<?String,Error>"
      ],
      "spread": false,
      "description": "If the file doesn't implement the `<extend />` tag, the\n                                  promise will resolve with `null`."
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "extendFromPath",
    "memberof": "src/app/index.js~SvelteExtend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~SvelteExtend#extendFromPath",
    "access": "public",
    "description": "Extends an Svelte single file component that implements the `<extend />` tag by using just\nits path; once the file is loaded, the method will internally call\n{@link SvelteExtend#extend}.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "maxDepth",
        "description": "How many components can be extended. For example, if a file\n                             extends from one that extends from another and the parameter\n                             is set to `1`, the parsing will fail."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<?String,Error>"
      ],
      "spread": false,
      "description": "If the file doesn't implement the `<extend />` tag, the\n                                  promise will resolve with `null`."
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/index.js",
    "content": "const App = require('./app');\n/**\n * @ignore\n */\nmodule.exports = new App();\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/rollup.js",
    "content": "const rollupUtils = require('rollup-pluginutils');\nconst app = require('./index');\n\n/**\n * @typedef {function} RollupFilter\n * @param {String} filepath The path to validate.\n * @return {Boolean} Whether or not the path is valid.\n */\n\n/**\n * @typedef {Object} SvelteExtendRollupPluginOptions\n * @property {Number} [allowedMaxDepth=0] How many components level can be extended. For example,\n *                                        if a file extends from one that extends from another\n *                                        and this is set to `1`, the parsing will fail.\n * @property {Array}  [include=[]]        A list of expressions the name of a file should match in\n *                                        order to be processed by the plugin.\n * @property {Array}  [exclude=[]]        A list of expressions the name of a file shouldn't match\n *                                        in order to be processed by the plugin.\n */\n\n/**\n * The plugin that implements {@link SvelteExtend} for Rollup.\n */\nclass SvelteExtendRollupPlugin {\n  /**\n   * A shorthand static method to create a new instance of the plugin.\n   * @param {SvelteExtendRollupPluginOptions} [options] The plugin options.\n   * @param {String}                          [name]    The plugin instance's name.\n   * @return {SvelteExtendRollupPlugin}\n   * @static\n   */\n  static svelteExtend(options, name) {\n    return new SvelteExtendRollupPlugin(options, name);\n  }\n  /**\n   * @param {SvelteExtendRollupPluginOptions} [options={}]\n   * The plugin options.\n   * @param {String} [name='svelte-extend-rollup-plugin']\n   * The plugin instance's name.\n   */\n  constructor(options = {}, name = 'svelte-extend-rollup-plugin') {\n    /**\n     * The plugin options.\n     * @type {SvelteExtendRollupPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = Object.assign(\n      {\n        allowedMaxDepth: 0,\n        include: [],\n        exclude: [],\n      },\n      options\n    );\n    /**\n     * The plugin instance's name.\n     * @type {String}\n     * @access protected\n     * @ignore\n     */\n    this._name = name;\n    /**\n     * The filter to decide which files will be processed and which won't.\n     * @type {RollupFilter}\n     * @access protected\n     * @ignore\n     */\n    this._filter = rollupUtils.createFilter(\n      this._options.include,\n      this._options.exclude\n    );\n  }\n  /**\n   * The method Rollup calls when processing a file. It first validates if the file matches\n   * the filter and then calls {@link SvelteExtend#extend}.\n   * @param {String} code      The file contents.\n   * @param {String} filepath  The file path.\n   * @return {?Promise<String,Error>} If the file can't be processed, it will return `null`.\n   */\n  transform(code, filepath) {\n    let result;\n    if (filepath.match(/\\.svelte(?:$|\\?)/i) && this._filter(filepath)) {\n      result = app.extend(code, filepath, this._options.allowedMaxDepth);\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n  /**\n   * The plugin options.\n   * @type {SvelteExtendRollupPluginOptions}\n   */\n  get options() {\n    return this._options;\n  }\n  /**\n   * The plugin instance's name.\n   * @type {String}\n   */\n  get name() {\n    return this._name;\n  }\n}\n\nmodule.exports = SvelteExtendRollupPlugin;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/rollup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "RollupFilter",
    "memberof": "src/rollup.js",
    "static": true,
    "longname": "src/rollup.js~RollupFilter",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether or not the path is valid."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "RollupFilter"
    }
  },
  {
    "__docId__": 56,
    "kind": "typedef",
    "name": "SvelteExtendRollupPluginOptions",
    "memberof": "src/rollup.js",
    "static": true,
    "longname": "src/rollup.js~SvelteExtendRollupPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "allowedMaxDepth",
        "description": "How many components level can be extended. For example,\n                                       if a file extends from one that extends from another\n                                       and this is set to `1`, the parsing will fail."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "include",
        "description": "A list of expressions the name of a file should match in\n                                       order to be processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "exclude",
        "description": "A list of expressions the name of a file shouldn't match\n                                       in order to be processed by the plugin."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SvelteExtendRollupPluginOptions"
    }
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "SvelteExtendRollupPlugin",
    "memberof": "src/rollup.js",
    "static": true,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/rollup.js",
    "importStyle": "SvelteExtendRollupPlugin",
    "description": "The plugin that implements {@link SvelteExtend} for Rollup.",
    "lineNumber": 24,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "svelteExtend",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin.svelteExtend",
    "access": "public",
    "description": "A shorthand static method to create a new instance of the plugin.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "SvelteExtendRollupPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The plugin options."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "The plugin instance's name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SvelteExtendRollupPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "SvelteExtendRollupPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The plugin options."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'svelte-extend-rollup-plugin'",
        "defaultRaw": "'svelte-extend-rollup-plugin'",
        "name": "name",
        "description": "The plugin instance's name."
      }
    ]
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_options",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "static": false,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 48,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "SvelteExtendRollupPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_name",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "static": false,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin#_name",
    "access": "protected",
    "description": "The plugin instance's name.",
    "lineNumber": 62,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_filter",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "static": false,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin#_filter",
    "access": "protected",
    "description": "The filter to decide which files will be processed and which won't.",
    "lineNumber": 69,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "RollupFilter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "transform",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin#transform",
    "access": "public",
    "description": "The method Rollup calls when processing a file. It first validates if the file matches\nthe filter and then calls {@link SvelteExtend#extend}.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The file contents."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The file path."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise<String,Error>"
      ],
      "spread": false,
      "description": "If the file can't be processed, it will return `null`."
    }
  },
  {
    "__docId__": 64,
    "kind": "get",
    "name": "options",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin#options",
    "access": "public",
    "description": "The plugin options.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "SvelteExtendRollupPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "get",
    "name": "name",
    "memberof": "src/rollup.js~SvelteExtendRollupPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/rollup.js~SvelteExtendRollupPlugin#name",
    "access": "public",
    "description": "The plugin instance's name.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/services/extender.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * This is the class that merges single file components (SFCs).\n */\nclass Extender {\n  /**\n   * @param {JSMerger}       jsMerger To merge the JS scripts and remove duplicated declarations.\n   * @param {Class<SFCData>} sfcData  To create a \"final\" SFC with the merged information.\n   */\n  constructor(jsMerger, sfcData) {\n    /**\n     * A local reference for the `jsMerger` service.\n     * @type {JSMerger}\n     * @access protected\n     * @ignore\n     */\n    this._jsMerger = jsMerger;\n    /**\n     * The class used to create the objects with the SFC merged information.\n     * @type {Class<SFCData>}\n     * @access protected\n     * @ignore\n     */\n    this._sfcData = sfcData;\n    /**\n     * A dictionary of regular expression the class uses.\n     * @type {Object}\n     * @property {RegExp} htmlSrc A expression the class will use to find `src` attributes on\n     *                            HTML code in order to update relative paths when merging\n     *                            two SFCs.\n     * @property {RegExp} cssUrl  A expression the class will use to find `url()` properties on\n     *                            CSS code in order to update relative paths when merging\n     *                            two SFCs.\n     * @property {RegExp} jsPaths A expression the class will use to find `import` statements on\n     *                            JS code in order to update relative paths when merging two SFCs.\n     * @access protected\n     * @ignore\n     */\n    this._expressions = {\n      htmlSrc: /\\s+(?:src=\"(\\.[^\"]+)\"|src='(\\.[^']+)')/ig,\n      cssUrl: /url\\s*\\(\\s*(?:['\"])?(\\.[^\"']+)(?:['\"])?\\)/ig,\n      jsPaths: /(?: |^)(?:(?:from|import)\\s+(?:[\"'](\\.[^\"']+)[\"'])|require\\s*\\(\\s*[\"'](\\.[^\"']+)[\"']\\s*\\))/igm,\n    };\n    /**\n     * A list of private attributes used by the application and that should be removed from\n     * tags.\n     * @type {Array<String>}\n     * @access protected\n     * @ignore\n     */\n    this._privateAttributes = ['extend'];\n  }\n  /**\n   * Takes an SFC data object, check if it extends from another and then does a recursive merge\n   * in order to generate a final SFC data object. It's recursive in case an SFC extends from an\n   * SFC that then extends from another...\n   * @param {SFCData} sfc          The SFC information.\n   * @param {Number}  [maxDepth=0] How many components can be extended. For example, if a file\n   *                               extends from one that extends from another and the parameter\n   *                               is set to `1`, the parsing will fail.\n   * @return {SFCData}\n   * @throws {Error} If the \"extend chain\" goes beyond the `maxDepth` limit.\n   */\n  generate(sfc, maxDepth = 0) {\n    return this._generate(sfc, maxDepth, 1);\n  }\n  /**\n   * The method that actually generates the \"final SFC\".\n   * @param {SFCData} sfc          The SFC information.\n   * @param {Number}  maxDepth     How many components can be extended. For example, if a file\n   *                               extends from one that extends from another and the parameter\n   *                               is set to `1`, the parsing will fail.\n   * @param {Number}  currentDepth The level of depth in which a file is currently being extended.\n   * @return {SFCData}\n   * @throws {Error} If the \"extend chain\" goes beyond the `maxDepth` limit.\n   * @access protected\n   * @ignore\n   */\n  _generate(sfc, maxDepth, currentDepth) {\n    let result;\n    if (sfc.hasBaseFileData) {\n      const newCurrentDepth = currentDepth + 1;\n      if (maxDepth && newCurrentDepth > maxDepth) {\n        throw new Error(\n          `The file '${sfc.filepath}' can't extend from another file, the max depth ` +\n          `limit is set to ${maxDepth}`\n        );\n      }\n\n      const base = this._generate(sfc.baseFileData, maxDepth, newCurrentDepth);\n      result = this._extend(base, sfc);\n    } else {\n      result = sfc;\n    }\n\n    return result;\n  }\n  /**\n   * Generates a single SFC data object by merging a base SFC and one that extends it.\n   * @param {SFCData} base   The data of the base SFC.\n   * @param {SFCData} target The data of the SFC that extends the base.\n   * @return {SFCData}\n   * @access protected\n   * @ignore\n   */\n  _extend(base, target) {\n    const relative = path.relative(target.directory, base.directory);\n    const absolute = path.join(target.directory, relative);\n    const directory = path.relative(target.directory, absolute);\n\n    const sfc = this._sfcData.new(target.filepath);\n    sfc.addMarkup(this._extendMarkup(base, target, directory));\n    const moduleScript = this._extendModuleScript(base, target, directory);\n    if (moduleScript.content) {\n      sfc.addScript(moduleScript.content, moduleScript.attributes);\n    }\n    const script = this._extendScript(base, target, directory);\n    if (script.content) {\n      sfc.addScript(script.content, script.attributes);\n    }\n    const style = this._extendStyle(base, target, directory);\n    if (style.content) {\n      sfc.addStyle(style.content, style.attributes);\n    }\n\n    return sfc;\n  }\n  /**\n   * Generates the markup of the merge of two SFCs. If the extended SFC doesn't have the `html`\n   * attribute on its `<extend />` tag, the returned markup won't contain the one from the base\n   * SFC.\n   * @param {SFCData} base      The data of the base SFC.\n   * @param {SFCData} target    The data of the SFC that extends the base.\n   * @param {String}  directory The relative directory path between the SFC that extends and the\n   *                            base one; this is used to update the relative paths on the code.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _extendMarkup(base, target, directory) {\n    let result;\n    const htmlPosition = this._getMergePosition(target.extendTagAttributes.html);\n    if (htmlPosition === null) {\n      result = target.markup;\n    } else {\n      const baseMarkup = this._updateMarkupPaths(base.markup, directory);\n      if (htmlPosition === 'after') {\n        result = `${baseMarkup}\\n${target.markup}`;\n      } else {\n        result = `${target.markup}\\n${baseMarkup}`;\n      }\n    }\n\n    return this._cleanTextBlock(result);\n  }\n  /**\n   * Generates an style {@link SFCTag} of the merge of two SFCs. If the extended SFC doesn't\n   * have any styling, it will use the one from the base; but if there's a style tag, it will use\n   * that instead; and if the extended style tag uses the `extend` attribute, then the content of\n   * both tags will be merged.\n   * @param {SFCData} base      The data of the base SFC.\n   * @param {SFCData} target    The data of the SFC that extends the base.\n   * @param {String}  directory The relative directory path between the SFC that extends and the\n   *                            base one; this is used to update the relative paths on the code.\n   * @return {SFCTag}\n   * @access protected\n   * @ignore\n   */\n  _extendStyle(base, target, directory) {\n    const baseStyle = base.style;\n    const targetStyle = target.style;\n    let attributes;\n    let content;\n    if (target.hasStyles) {\n      const stylePosition = this._getMergePosition(targetStyle.attributes.extend);\n      if (stylePosition === null) {\n        ({ attributes, content } = targetStyle);\n      } else {\n        attributes = Object.assign({}, baseStyle.attributes, targetStyle.attributes);\n        const newBaseStyle = this._updateCSSPaths(baseStyle.content, directory);\n        if (stylePosition === 'after') {\n          content = `${newBaseStyle}\\n${targetStyle.content}`;\n        } else {\n          content = `${targetStyle.content}\\n${newBaseStyle}`;\n        }\n      }\n    } else {\n      ({ attributes } = baseStyle);\n      content = this._updateCSSPaths(baseStyle.content, directory);\n    }\n\n\n    return {\n      attributes: this._cleanAttributes(attributes),\n      content: this._cleanTextBlock(content),\n    };\n  }\n  /**\n   * Generates an script {@link SFCTag} of the merge of two SFCs. If the extended SFC doesn't\n   * have any scripts, it will use the one from the base; but if there's a script tag, it will use\n   * that instead; and if the extended script tag uses the `extend` attribute, then the content of\n   * both tags will be merged.\n   * @param {SFCData} base      The data of the base SFC.\n   * @param {SFCData} target    The data of the SFC that extends the base.\n   * @param {String}  directory The relative directory path between the SFC that extends and the\n   *                            base one; this is used to update the relative paths on the code.\n   * @return {SFCTag}\n   * @access protected\n   * @ignore\n   */\n  _extendScript(base, target, directory) {\n    return this._extendJSBlock(\n      base.script,\n      target.script,\n      target.hasScripts,\n      directory\n    );\n  }\n  /**\n   * Generates a module script {@link SFCTag} (the ones with the `context=\"module\"` attribute) of\n   * the merge of two SFCs. If the extended SFC doesn't have any scripts, it will use the one from\n   * the base; but if there's a script tag, it will use that instead; and if the extended script\n   * tag uses the `extend` attribute, then the content of both tags will be merged.\n   * @param {SFCData} base      The data of the base SFC.\n   * @param {SFCData} target    The data of the SFC that extends the base.\n   * @param {String}  directory The relative directory path between the SFC that extends and the\n   *                            base one; this is used to update the relative paths on the code.\n   * @return {SFCTag}\n   * @access protected\n   * @ignore\n   */\n  _extendModuleScript(base, target, directory) {\n    const mScript = this._extendJSBlock(\n      base.moduleScript,\n      target.moduleScript,\n      target.hasModuleScripts,\n      directory\n    );\n    mScript.attributes.context = 'module';\n    return mScript;\n  }\n  /**\n   * This is a utility method used to merge script {@link SFCTag}s. It's used by both\n   * {@link Extender#_extendScript} and {@link Extender#_extendModuleScript}.\n   * If the extended SFC doesn't have any scripts, it will use the one from the base; but if\n   * there's a script tag, it will use that instead; and if the extended script tag uses the\n   * `extend` attribute, then the content of both tags will be merged.\n   * @param {SFCTag}  baseJS       The tag that represents all the scripts from the base SFC.\n   * @param {SFCTag}  targetJS     The tag that represents all the scripts from the extended SFC.\n   * @param {Boolean} targetHasJS  Whether or not the extended SFC has any scripts.\n   * @param {String}  directory    The relative directory path between the SFC that extends and\n   *                               the base one; this is used to update the relative paths on\n   *                               the code.\n   * @return {SFCTag}\n   * @access protected\n   * @ignore\n   */\n  _extendJSBlock(baseJS, targetJS, targetHasJS, directory) {\n    let attributes;\n    let content;\n    if (targetHasJS) {\n      if (targetJS.attributes.extend) {\n        if (baseJS.content) {\n          content = this._jsMerger.mergeCode(\n            this._updateJSPaths(baseJS.content, directory),\n            targetJS.content\n          );\n        } else {\n          ({ content } = targetJS);\n        }\n\n        attributes = Object.assign({}, baseJS.attributes, targetJS.attributes);\n      } else {\n        ({ attributes, content } = targetJS);\n      }\n    } else {\n      ({ attributes } = baseJS);\n      content = this._updateJSPaths(baseJS.content, directory);\n    }\n\n    return {\n      attributes: this._cleanAttributes(attributes),\n      content: this._cleanTextBlock(content),\n    };\n  }\n  /**\n   * Updates relative paths on a block of JS code to be relative for a give directory. This is\n   * used when a block of JS code is going to be added on a extended SFC.\n   * @param {String} js        The code to update.\n   * @param {String} directory The relative path to the directory in which the extended SFC is\n   *                           located.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _updateJSPaths(js, directory) {\n    return this._updateCodePaths(\n      js,\n      this._expressions.jsPaths,\n      directory\n    );\n  }\n  /**\n   * Updates relative paths on a block of HTML code to be relative for a give directory. This is\n   * used when a block of HTML code is going to be added on a extended SFC.\n   * @param {String} markup    The code to update.\n   * @param {String} directory The relative path to the directory in which the extended SFC is\n   *                           located.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _updateMarkupPaths(markup, directory) {\n    return this._updateCSSPaths(\n      this._updateCodePaths(markup, this._expressions.htmlSrc, directory),\n      directory\n    );\n  }\n  /**\n   * Updates relative paths on a block of CSS code to be relative for a give directory. This is\n   * used when a block of CSS code is going to be added on a extended SFC.\n   * @param {String} css       The code to update.\n   * @param {String} directory The relative path to the directory in which the extended SFC is\n   *                           located.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _updateCSSPaths(css, directory) {\n    return this._updateCodePaths(css, this._expressions.cssUrl, directory);\n  }\n  /**\n   * Utility method that updates paths on a given code to make them relative to a new directory.\n   * This is used to update the contents of an SFC before they are added to one that extends it.\n   * @param {String} code       The code to update.\n   * @param {RegExp} expression The expression to extract the relative paths.\n   * @param {String} directory  The relative path to the directory in which the extended SFC is\n   *                            located.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _updateCodePaths(code, expression, directory) {\n    const items = [];\n    let match = expression.exec(code);\n    while (match) {\n      const [statement, itemPath, alternativeItemPath] = match;\n      items.push({\n        statement,\n        itemPath: itemPath || alternativeItemPath,\n      });\n\n      match = expression.exec(code);\n    }\n\n    const newCode = items.reduce(\n      (currentCode, item) => {\n        const newItemPath = path.join(directory, item.itemPath).replace(/^(\\w)/, './$1');\n        const newStatement = item.statement.replace(item.itemPath, newItemPath);\n        return currentCode.replace(item.statement, newStatement);\n      },\n      code\n    );\n\n    return newCode;\n  }\n  /**\n   * A utility method that parses the value of an `extend` HTML attribute the class uses to\n   * determine the position of the base code in relation with the extended one:\n   * - `undefined` or `'false'`: `null` - the code won't be merged.\n   * - no value, `'true'` or `'after'`: first the base code and then the extended one.\n   * - `'before'`: first the extended code and then the base one.\n   * @param {String} [value] The value of the `extend` HTML attribute.\n   * @return {?String} If the attribute is not defined or if it's value is `'false'`, it will\n   *                   return `null`, indicating that the code shouldn't be merged.\n   * @access protected\n   * @ignore\n   */\n  _getMergePosition(value) {\n    const defaultValue = 'after';\n    let result;\n    const valueType = typeof value;\n    if (valueType === 'undefined' || !value) {\n      result = null;\n    } else if (valueType === 'string') {\n      result = value.match(/(?:before|after)/i) ? value.toLowerCase() : defaultValue;\n    } else {\n      result = defaultValue;\n    }\n\n    return result;\n  }\n  /**\n   * Utility method to remove empty lines from the beginning and end of a block of code. This\n   * method exists because is common for a block to end up like this when merging its contents.\n   * @param {String} text The text to clean.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _cleanTextBlock(text) {\n    const newText = text\n    .replace(/^\\n/, '')\n    .replace(/\\n$/, '');\n\n    return newText.trim() ? newText : '';\n  }\n  /**\n   * Removes the {@link Extender#_privateAttributes} from a dictionary of attributes.\n   * @param {Object} attributes The dictionary of attributes to clean.\n   * @return {Object} A new dictionary without the private attributes\n   * @access protected\n   * @ignore\n   */\n  _cleanAttributes(attributes) {\n    const result = Object.assign({}, attributes);\n    this._privateAttributes.forEach((name) => {\n      delete result[name];\n    });\n\n    return result;\n  }\n}\n/**\n * The service provider that once registered on {@link SvelteExtend} will save the an instance of\n * {@link JSMerger} as the `jsMerger` service.\n * @type {Provider}\n */\nconst extender = provider((app) => {\n  app.set('extender', () => new Extender(\n    app.get('jsMerger'),\n    app.get('sfcData')\n  ));\n});\n\nmodule.exports = {\n  Extender,\n  extender,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/services/extender.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "Extender",
    "memberof": "src/services/extender.js",
    "static": true,
    "longname": "src/services/extender.js~Extender",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/extender.js",
    "importStyle": "{Extender}",
    "description": "This is the class that merges single file components (SFCs).",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSMerger"
        ],
        "spread": false,
        "optional": false,
        "name": "jsMerger",
        "description": "To merge the JS scripts and remove duplicated declarations."
      },
      {
        "nullable": null,
        "types": [
          "Class<SFCData>"
        ],
        "spread": false,
        "optional": false,
        "name": "sfcData",
        "description": "To create a \"final\" SFC with the merged information."
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_jsMerger",
    "memberof": "src/services/extender.js~Extender",
    "static": false,
    "longname": "src/services/extender.js~Extender#_jsMerger",
    "access": "protected",
    "description": "A local reference for the `jsMerger` service.",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "JSMerger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_sfcData",
    "memberof": "src/services/extender.js~Extender",
    "static": false,
    "longname": "src/services/extender.js~Extender#_sfcData",
    "access": "protected",
    "description": "The class used to create the objects with the SFC merged information.",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Class<SFCData>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_expressions",
    "memberof": "src/services/extender.js~Extender",
    "static": false,
    "longname": "src/services/extender.js~Extender#_expressions",
    "access": "protected",
    "description": "A dictionary of regular expression the class uses.",
    "lineNumber": 40,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "htmlSrc",
        "description": "A expression the class will use to find `src` attributes on\n                           HTML code in order to update relative paths when merging\n                           two SFCs."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "cssUrl",
        "description": "A expression the class will use to find `url()` properties on\n                           CSS code in order to update relative paths when merging\n                           two SFCs."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "jsPaths",
        "description": "A expression the class will use to find `import` statements on\n                           JS code in order to update relative paths when merging two SFCs."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_privateAttributes",
    "memberof": "src/services/extender.js~Extender",
    "static": false,
    "longname": "src/services/extender.js~Extender#_privateAttributes",
    "access": "protected",
    "description": "A list of private attributes used by the application and that should be removed from\ntags.",
    "lineNumber": 52,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array<String>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "generate",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#generate",
    "access": "public",
    "description": "Takes an SFC data object, check if it extends from another and then does a recursive merge\nin order to generate a final SFC data object. It's recursive in case an SFC extends from an\nSFC that then extends from another...",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "sfc",
        "description": "The SFC information."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "maxDepth",
        "description": "How many components can be extended. For example, if a file\n                              extends from one that extends from another and the parameter\n                              is set to `1`, the parsing will fail."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCData"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the \"extend chain\" goes beyond the `maxDepth` limit."
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "_generate",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_generate",
    "access": "protected",
    "description": "The method that actually generates the \"final SFC\".",
    "lineNumber": 80,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "sfc",
        "description": "The SFC information."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxDepth",
        "description": "How many components can be extended. For example, if a file\n                              extends from one that extends from another and the parameter\n                              is set to `1`, the parsing will fail."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentDepth",
        "description": "The level of depth in which a file is currently being extended."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCData"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the \"extend chain\" goes beyond the `maxDepth` limit."
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_extend",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_extend",
    "access": "protected",
    "description": "Generates a single SFC data object by merging a base SFC and one that extends it.",
    "lineNumber": 107,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The data of the base SFC."
      },
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The data of the SFC that extends the base."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCData"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_extendMarkup",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_extendMarkup",
    "access": "protected",
    "description": "Generates the markup of the merge of two SFCs. If the extended SFC doesn't have the `html`\nattribute on its `<extend />` tag, the returned markup won't contain the one from the base\nSFC.",
    "lineNumber": 141,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The data of the base SFC."
      },
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The data of the SFC that extends the base."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative directory path between the SFC that extends and the\n                           base one; this is used to update the relative paths on the code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_extendStyle",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_extendStyle",
    "access": "protected",
    "description": "Generates an style {@link SFCTag} of the merge of two SFCs. If the extended SFC doesn't\nhave any styling, it will use the one from the base; but if there's a style tag, it will use\nthat instead; and if the extended style tag uses the `extend` attribute, then the content of\nboth tags will be merged.",
    "lineNumber": 170,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The data of the base SFC."
      },
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The data of the SFC that extends the base."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative directory path between the SFC that extends and the\n                           base one; this is used to update the relative paths on the code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_extendScript",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_extendScript",
    "access": "protected",
    "description": "Generates an script {@link SFCTag} of the merge of two SFCs. If the extended SFC doesn't\nhave any scripts, it will use the one from the base; but if there's a script tag, it will use\nthat instead; and if the extended script tag uses the `extend` attribute, then the content of\nboth tags will be merged.",
    "lineNumber": 212,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The data of the base SFC."
      },
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The data of the SFC that extends the base."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative directory path between the SFC that extends and the\n                           base one; this is used to update the relative paths on the code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "_extendModuleScript",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_extendModuleScript",
    "access": "protected",
    "description": "Generates a module script {@link SFCTag} (the ones with the `context=\"module\"` attribute) of\nthe merge of two SFCs. If the extended SFC doesn't have any scripts, it will use the one from\nthe base; but if there's a script tag, it will use that instead; and if the extended script\ntag uses the `extend` attribute, then the content of both tags will be merged.",
    "lineNumber": 233,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The data of the base SFC."
      },
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The data of the SFC that extends the base."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative directory path between the SFC that extends and the\n                           base one; this is used to update the relative paths on the code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "_extendJSBlock",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_extendJSBlock",
    "access": "protected",
    "description": "This is a utility method used to merge script {@link SFCTag}s. It's used by both\n{@link Extender#_extendScript} and {@link Extender#_extendModuleScript}.\nIf the extended SFC doesn't have any scripts, it will use the one from the base; but if\nthere's a script tag, it will use that instead; and if the extended script tag uses the\n`extend` attribute, then the content of both tags will be merged.",
    "lineNumber": 259,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCTag"
        ],
        "spread": false,
        "optional": false,
        "name": "baseJS",
        "description": "The tag that represents all the scripts from the base SFC."
      },
      {
        "nullable": null,
        "types": [
          "SFCTag"
        ],
        "spread": false,
        "optional": false,
        "name": "targetJS",
        "description": "The tag that represents all the scripts from the extended SFC."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "targetHasJS",
        "description": "Whether or not the extended SFC has any scripts."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative directory path between the SFC that extends and\n                              the base one; this is used to update the relative paths on\n                              the code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "_updateJSPaths",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_updateJSPaths",
    "access": "protected",
    "description": "Updates relative paths on a block of JS code to be relative for a give directory. This is\nused when a block of JS code is going to be added on a extended SFC.",
    "lineNumber": 297,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "js",
        "description": "The code to update."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative path to the directory in which the extended SFC is\n                          located."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "_updateMarkupPaths",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_updateMarkupPaths",
    "access": "protected",
    "description": "Updates relative paths on a block of HTML code to be relative for a give directory. This is\nused when a block of HTML code is going to be added on a extended SFC.",
    "lineNumber": 314,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "markup",
        "description": "The code to update."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative path to the directory in which the extended SFC is\n                          located."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "_updateCSSPaths",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_updateCSSPaths",
    "access": "protected",
    "description": "Updates relative paths on a block of CSS code to be relative for a give directory. This is\nused when a block of CSS code is going to be added on a extended SFC.",
    "lineNumber": 330,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "css",
        "description": "The code to update."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative path to the directory in which the extended SFC is\n                          located."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "_updateCodePaths",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_updateCodePaths",
    "access": "protected",
    "description": "Utility method that updates paths on a given code to make them relative to a new directory.\nThis is used to update the contents of an SFC before they are added to one that extends it.",
    "lineNumber": 344,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The code to update."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "The expression to extract the relative paths."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The relative path to the directory in which the extended SFC is\n                           located."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_getMergePosition",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_getMergePosition",
    "access": "protected",
    "description": "A utility method that parses the value of an `extend` HTML attribute the class uses to\ndetermine the position of the base code in relation with the extended one:\n- `undefined` or `'false'`: `null` - the code won't be merged.\n- no value, `'true'` or `'after'`: first the base code and then the extended one.\n- `'before'`: first the extended code and then the base one.",
    "lineNumber": 380,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value of the `extend` HTML attribute."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "If the attribute is not defined or if it's value is `'false'`, it will\n                  return `null`, indicating that the code shouldn't be merged."
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "_cleanTextBlock",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_cleanTextBlock",
    "access": "protected",
    "description": "Utility method to remove empty lines from the beginning and end of a block of code. This\nmethod exists because is common for a block to end up like this when merging its contents.",
    "lineNumber": 402,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to clean."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "_cleanAttributes",
    "memberof": "src/services/extender.js~Extender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/extender.js~Extender#_cleanAttributes",
    "access": "protected",
    "description": "Removes the {@link Extender#_privateAttributes} from a dictionary of attributes.",
    "lineNumber": 416,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "The dictionary of attributes to clean."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new dictionary without the private attributes"
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "extender",
    "memberof": "src/services/extender.js",
    "static": true,
    "longname": "src/services/extender.js~extender",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/extender.js",
    "importStyle": "{extender}",
    "description": "The service provider that once registered on {@link SvelteExtend} will save the an instance of\n{@link JSMerger} as the `jsMerger` service.",
    "lineNumber": 430,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/services/index.js",
    "content": "const { extender } = require('./extender');\nconst { jsMerger } = require('./jsMerger');\nconst { sfcData } = require('./sfcData');\nconst { sfcParser } = require('./sfcParser');\n\nmodule.exports = {\n  extender,\n  jsMerger,\n  sfcData,\n  sfcParser,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/services/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/services/jsMerger.js",
    "content": "const babylon = require('babylon');\nconst babelTraverse = require('@babel/traverse').default;\nconst babelTypes = require('@babel/types');\nconst babelGenerator = require('@babel/generator').default;\nconst { provider } = require('jimple');\n\n/**\n * @typdef {function} JSMergerNameFuntion\n * @description Gets the name/ID of an AST node declaration.\n * @param {Object} nodePath The AST node path object that contains the declaration.\n * @return {String}\n * @ignore\n */\n\n/**\n * @typdef {Object} JSMergerCodeData\n * @property {Object}  ast              The AST of the JS block code.\n * @property {Array}   imports          A list of all the import declarations on the block.\n * @property {Array}   variables        A list of all the variables declarations on the block.\n * @property {Array}   bindings         A list of all the bindings declarations on the block.\n * @property {Array}   functions        A list of all the functions declarations on the block.\n * @property {?Object} firstContentNode A reference to the first node on the block that is not an\n *                                      import declaration. This is used as an \"anchor\" to move all\n *                                      the import declarations from the extend block to before\n *                                      this node.\n * @ignore\n */\n\n/**\n * This class takes care of merging two blocks of JS code by parsing their ASTs and getting rid\n * of duplicated variables, \"bindings\" and functions. By \"binding\", it referes to the named\n * exports Svelte uses as props/bindings/attributes for the components.\n */\nclass JSMerger {\n  /**\n   * @ignore\n   */\n  constructor() {\n    /**\n     * @ignore\n     */\n    this._getBindingName = this._getBindingName.bind(this);\n    /**\n     * @ignore\n     */\n    this._getVariableName = this._getVariableName.bind(this);\n    /**\n     * @ignore\n     */\n    this._getFunctionName = this._getFunctionName.bind(this);\n  }\n  /**\n   * Merges two blocks of JS code.\n   * @param {String} base     The code that is being overwritten/extended.\n   * @param {String} extended The code that overwrites/extends.\n   * @return {String}\n   */\n  mergeCode(base, extended) {\n    const baseData = this._getCodeData(base);\n    const extendedData = this._getCodeData(extended);\n\n    if (baseData.firstContentNode) {\n      extendedData\n      .imports\n      .reverse()\n      .reduce(\n        (prevNode, importNode) => {\n          const { node: toAdd } = importNode;\n          importNode.remove();\n          const [newNode] = prevNode.insertBefore(toAdd);\n          return newNode;\n        },\n        baseData.firstContentNode\n      );\n    }\n\n    this._extendPaths(\n      baseData.bindings,\n      extendedData.bindings,\n      this._getBindingName\n    );\n    this._extendPaths(\n      baseData.variables,\n      extendedData.variables,\n      this._getVariableName\n    );\n    this._extendPaths(\n      baseData.functions,\n      extendedData.functions,\n      this._getFunctionName\n    );\n\n    const { code: baseCode } = babelGenerator(baseData.ast, {}, base);\n    const { code: extendedCode } = babelGenerator(extendedData.ast, {}, extended);\n\n    return `${baseCode}\\n${extendedCode}`;\n  }\n  /**\n   * Processes a list of declarations of the same type (variables, bindings or functions) and\n   * replaces the original definitions with the extended ones.\n   * @param {Array}               basePaths      The list of declarations from the \"original block\".\n   * @param {Array}               extendedPaths  The list of declarations from the \"extended block\".\n   * @param {JSMergerNameFuntion} nameFn         The function that returns the name/ID of the\n   *                                             declaration.\n   * @access protected\n   * @ignore\n   */\n  _extendPaths(basePaths, extendedPaths, nameFn) {\n    const pathsByName = basePaths.reduce(\n      (acc, nodePath) => Object.assign({}, acc, {\n        [nameFn(nodePath)]: {\n          base: nodePath,\n        },\n      }),\n      {}\n    );\n\n    extendedPaths.forEach((nodePath) => {\n      const name = nameFn(nodePath);\n      if (pathsByName[name]) {\n        pathsByName[name].extended = nodePath;\n      }\n    });\n\n    Object.keys(pathsByName).forEach((name) => {\n      const nodePath = pathsByName[name];\n      if (nodePath.extended) {\n        const { node: toMove } = nodePath.extended;\n        nodePath.extended.remove();\n        nodePath.base.insertAfter(toMove);\n        nodePath.base.remove();\n      }\n    });\n  }\n  /**\n   * Parses a block of JS code in order to get the relevant information the class needs in order\n   * to do a merge.\n   * @param {String} code The block of JS code to parse.\n   * @return {JSMergerCodeData}\n   * @access protected\n   * @ignore\n   */\n  _getCodeData(code) {\n    const ast = babylon.parse(code, {\n      sourceType: 'module',\n    });\n\n    const imports = [];\n    const variables = [];\n    const bindings = [];\n    const functions = [];\n    let firstContentNode = null;\n    babelTraverse(ast, {\n      enter: (nodePath) => {\n        const isRoot = nodePath.parent && babelTypes.isProgram(nodePath.parent);\n        if (babelTypes.isImportDeclaration(nodePath)) {\n          imports.push(nodePath);\n        } else if (!firstContentNode && isRoot) {\n          firstContentNode = nodePath;\n        }\n\n        if (babelTypes.isVariableDeclaration(nodePath) && nodePath.parent) {\n          if (isRoot) {\n            variables.push(nodePath);\n          } else if (babelTypes.isExportNamedDeclaration(nodePath.parent)) {\n            bindings.push(nodePath.parentPath);\n          }\n        } else if (babelTypes.isFunctionDeclaration(nodePath) && isRoot) {\n          functions.push(nodePath);\n        }\n      },\n    });\n\n    return {\n      ast,\n      imports,\n      variables,\n      bindings,\n      functions,\n      firstContentNode,\n    };\n  }\n  /**\n   * Gets the name of a binding declaration. By \"binding\", it referes to the named exports Svelte\n   * uses as props/bindings/attributes for the components.\n   * @param {Object} nodePath The AST node path object that contains the declaration.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _getBindingName(nodePath) {\n    return nodePath.node.declaration.declarations[0].id.name;\n  }\n  /**\n   * Gets the name of a variable declaration.\n   * @param {Object} nodePath The AST node path object that contains the declaration.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _getVariableName(nodePath) {\n    return nodePath.node.declarations[0].id.name;\n  }\n  /**\n   * Gets the name of a function declaration.\n   * @param {Object} nodePath The AST node path object that contains the declaration.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _getFunctionName(nodePath) {\n    return nodePath.node.id.name;\n  }\n}\n/**\n * The service provider that once registered on {@link SvelteExtend} will save the an instance of\n * {@link JSMerger} as the `jsMerger` service.\n * @type {Provider}\n */\nconst jsMerger = provider((app) => {\n  app.set('jsMerger', () => new JSMerger());\n});\n\nmodule.exports = {\n  JSMerger,\n  jsMerger,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/services/jsMerger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "JSMerger",
    "memberof": "src/services/jsMerger.js",
    "static": true,
    "longname": "src/services/jsMerger.js~JSMerger",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/jsMerger.js",
    "importStyle": "{JSMerger}",
    "description": "This class takes care of merging two blocks of JS code by parsing their ASTs and getting rid\nof duplicated variables, \"bindings\" and functions. By \"binding\", it referes to the named\nexports Svelte uses as props/bindings/attributes for the components.",
    "lineNumber": 34,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/jsMerger.js~JSMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/jsMerger.js~JSMerger#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "mergeCode",
    "memberof": "src/services/jsMerger.js~JSMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/jsMerger.js~JSMerger#mergeCode",
    "access": "public",
    "description": "Merges two blocks of JS code.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The code that is being overwritten/extended."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "extended",
        "description": "The code that overwrites/extends."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "_extendPaths",
    "memberof": "src/services/jsMerger.js~JSMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/jsMerger.js~JSMerger#_extendPaths",
    "access": "protected",
    "description": "Processes a list of declarations of the same type (variables, bindings or functions) and\nreplaces the original definitions with the extended ones.",
    "lineNumber": 108,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "basePaths",
        "description": "The list of declarations from the \"original block\"."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "extendedPaths",
        "description": "The list of declarations from the \"extended block\"."
      },
      {
        "nullable": null,
        "types": [
          "JSMergerNameFuntion"
        ],
        "spread": false,
        "optional": false,
        "name": "nameFn",
        "description": "The function that returns the name/ID of the\n                                            declaration."
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "_getCodeData",
    "memberof": "src/services/jsMerger.js~JSMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/jsMerger.js~JSMerger#_getCodeData",
    "access": "protected",
    "description": "Parses a block of JS code in order to get the relevant information the class needs in order\nto do a merge.",
    "lineNumber": 143,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The block of JS code to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSMergerCodeData"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_getBindingName",
    "memberof": "src/services/jsMerger.js~JSMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/jsMerger.js~JSMerger#_getBindingName",
    "access": "protected",
    "description": "Gets the name of a binding declaration. By \"binding\", it referes to the named exports Svelte\nuses as props/bindings/attributes for the components.",
    "lineNumber": 191,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodePath",
        "description": "The AST node path object that contains the declaration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "_getVariableName",
    "memberof": "src/services/jsMerger.js~JSMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/jsMerger.js~JSMerger#_getVariableName",
    "access": "protected",
    "description": "Gets the name of a variable declaration.",
    "lineNumber": 201,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodePath",
        "description": "The AST node path object that contains the declaration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_getFunctionName",
    "memberof": "src/services/jsMerger.js~JSMerger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/jsMerger.js~JSMerger#_getFunctionName",
    "access": "protected",
    "description": "Gets the name of a function declaration.",
    "lineNumber": 211,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nodePath",
        "description": "The AST node path object that contains the declaration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "jsMerger",
    "memberof": "src/services/jsMerger.js",
    "static": true,
    "longname": "src/services/jsMerger.js~jsMerger",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/jsMerger.js",
    "importStyle": "{jsMerger}",
    "description": "The service provider that once registered on {@link SvelteExtend} will save the an instance of\n{@link JSMerger} as the `jsMerger` service.",
    "lineNumber": 220,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/services/sfcData.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * A basic class to handle single file components' (SFC) data and rendering for the app.\n */\nclass SFCData {\n  /**\n   * A shorthand to create a new instance of the class.\n   * @param {String} filepath The file path of the component for which the data will be saved. This\n   *                          is later used when merging components in order to fix relative paths\n   *                          between files.\n   *\n   * @return {SFCData}\n   * @static\n   */\n  static new(filepath) {\n    return new SFCData(filepath);\n  }\n  /**\n   * @param {String} filepath The file path of the component for which the data will be saved. This\n   *                          is later used when merging components in order to fix relative paths\n   *                          between files.\n   */\n  constructor(filepath) {\n    /**\n     * The path of the SFC.\n     * @type {String}\n     * @access protected\n     * @ignore\n     */\n    this._filepath = filepath;\n    /**\n     * The directory where the SFC is located.\n     * @type {String}\n     * @access protected\n     * @ignore\n     */\n    this._directory = path.dirname(this._filepath);\n    /**\n     * The HTML markup of the SFC; this doesn't include scripts and styles.\n     * @type {String}\n     * @access protected\n     * @ignore\n     */\n    this._markup = '';\n    /**\n     * The list of script tags the SFC has.\n     * @type {Array<SFCTag>}\n     * @access protected\n     * @ignore\n     */\n    this._scripts = [];\n    /**\n     * The list of module script tags (those with the `context=\"module\"` attribute) the SFC has.\n     * @type {Array<SFCTag>}\n     * @access protected\n     * @ignore\n     */\n    this._moduleScripts = [];\n    /**\n     * The list of style tags the SFC has.\n     * @type {Array<SFCTag>}\n     * @access protected\n     * @ignore\n     */\n    this._styles = [];\n    /**\n     * In case the SFC extends another SFC, this will be a reference for it.\n     * @type {?SFCData}\n     * @access protected\n     * @ignore\n     */\n    this._baseFile = null;\n    /**\n     * In case the SFC extends another SFC, this dictionary will contain the information of the\n     * `<extend />` tag.\n     * @type {Object}\n     * @access protected\n     * @ignore\n     */\n    this._extendTagAttributes = {};\n  }\n  /**\n   * Adds the information of a SFC this one is extending.\n   * @param {SFCData} fileData            The SFC information.\n   * @param {Object}  extendTagAttributes The attributes of this SFC `<extend />` tag.\n   * @throws {Error} If this SFC already has a base SFC already set.\n   * @throws {Error} If the `fileData` is not an instance of {@link SFCData}.\n   */\n  addBaseFileData(fileData, extendTagAttributes = {}) {\n    if (this._baseFile) {\n      throw new Error('You can\\'t add more than one base file data');\n    } else if (!(fileData instanceof SFCData)) {\n      throw new Error('`fileData` must be an instance of SFCData');\n    }\n\n    this._baseFile = fileData;\n    this._extendTagAttributes = extendTagAttributes;\n  }\n  /**\n   * Adds HTML markup for the SFC. If there's already markup saved, it will just append it.\n   * @param {String} content The HTML code to add.\n   */\n  addMarkup(content) {\n    const newMarkup = this._markup ?\n      `${this._markup}\\n${content}` :\n      content;\n    this._markup = newMarkup;\n  }\n  /**\n   * Adds a script tag information to the SFC.\n   * @param {String} content    The contents of the tag.\n   * @param {Object} attributes A dictionary with the tag attributes.\n   */\n  addScript(content, attributes = {}) {\n    const list = attributes.context === 'module' ?\n      this._moduleScripts :\n      this._scripts;\n    list.push({\n      content,\n      attributes,\n    });\n  }\n  /**\n   * Adds a style tag information to the SFC.\n   * @param {String} content    The contents of the tag.\n   * @param {Object} attributes A dictionary with the tag attributes.\n   */\n  addStyle(content, attributes = {}) {\n    this._styles.push({\n      content,\n      attributes,\n    });\n  }\n  /**\n   * Renders the whole SFC information into a string, so it can be saved on a file.\n   * @return {String}\n   */\n  render() {\n    const lines = [];\n    if (this.hasModuleScripts) {\n      lines.push(this._renderTag('script', this.moduleScript));\n    }\n\n    if (this.hasScripts) {\n      lines.push(this._renderTag('script', this.script));\n    }\n\n    if (this.hasStyles) {\n      lines.push(this._renderTag('style', this.style));\n    }\n\n    lines.push(this.markup);\n    return lines.join('\\n');\n  }\n  /**\n   * The path of the SFC.\n   * @type {String}\n   */\n  get filepath() {\n    return this._filepath;\n  }\n  /**\n   * The directory where the SFC is located.\n   * @type {String}\n   */\n  get directory() {\n    return this._directory;\n  }\n  /**\n   * Whether or not the SFC extends another SFC.\n   * @type {Boolean}\n   */\n  get hasBaseFileData() {\n    return this._baseFile !== null;\n  }\n  /**\n   * In case the SFC extends another SFC, this will be a reference for it.\n   * @type {?SFCData}\n   */\n  get baseFileData() {\n    return this._baseFile;\n  }\n  /**\n   * In case the SFC extends another SFC, this dictionary will contain the information of the\n   * `<extend />` tag.\n   * @type {Object}\n   */\n  get extendTagAttributes() {\n    return this._extendTagAttributes;\n  }\n  /**\n   * The HTML markup of the SFC; this doesn't include scripts and styles.\n   * @type {String}\n   */\n  get markup() {\n    return this._markup;\n  }\n  /**\n   * Whether or not the SFC has style tags.\n   * @type {Boolean}\n   */\n  get hasStyles() {\n    return this._styles.length > 0;\n  }\n  /**\n   * The list of style tags the SFC has.\n   * @type {Array<SFCTag>}\n   */\n  get styles() {\n    return this._styles;\n  }\n  /**\n   * A single {@link SFCTag} that merges the contents and attributes of all the style tags\n   * the SFC has.\n   * @type {SFCTag}\n   */\n  get style() {\n    return this._mergeTags(this._styles);\n  }\n  /**\n   * Whether or not the SFC has script tags.\n   * @type {Boolean}\n   */\n  get hasScripts() {\n    return this._scripts.length > 0;\n  }\n  /**\n   * The list of script tags the SFC has.\n   * @type {Array<SFCTag>}\n   */\n  get scripts() {\n    return this._scripts;\n  }\n  /**\n   * A single {@link SFCTag} that merges the contents and attributes of all the script tags\n   * the SFC has.\n   * @type {SFCTag}\n   */\n  get script() {\n    return this._mergeTags(this._scripts);\n  }\n  /**\n   * Whether or not the SFC has module script tags (those with the `context=\"module\"` attribute).\n   * @type {Boolean}\n   */\n  get hasModuleScripts() {\n    return this._moduleScripts.length > 0;\n  }\n  /**\n   * The list of module script tags (those with the `context=\"module\"` attribute) the SFC has.\n   * @type {Array<SFCTag>}\n   */\n  get moduleScripts() {\n    return this._moduleScripts;\n  }\n  /**\n   * A single {@link SFCTag} that merges the contents and attributes of all the module scripts\n   * tags (those with the `context=\"module\"` attribute) the SFC has.\n   * @type {SFCTag}\n   */\n  get moduleScript() {\n    const result = this._mergeTags(this._moduleScripts);\n    result.attributes.context = 'module';\n    return result;\n  }\n  /**\n   * A utility method that merges a list of tags into a single one.\n   * @param {Array<SFCTag>} tags The list of tags to merge.\n   * @return {SFCTag}\n   * @access protected\n   * @ignore\n   */\n  _mergeTags(tags) {\n    let result;\n    if (tags.length === 0) {\n      result = {\n        content: '',\n        attributes: {},\n      };\n    } else if (tags.length === 1) {\n      [result] = tags;\n    } else {\n      result = tags.reduce(\n        (acc, tag) => ({\n          content: `${acc.content}\\n${tag.content}`,\n          attributes: Object.assign(\n            {},\n            acc.attributes,\n            tag.attributes\n          ),\n        }),\n        {\n          content: '',\n          attributes: {},\n        }\n      );\n\n      result.content = result.content.replace(/^\\n/, '');\n    }\n\n    return result;\n  }\n  /**\n   * Renders a {@link SFCTag} on a string.\n   * @param {String} name The name of the tag (like `script` or `style`).\n   * @param {SFCTag} tag  The tag information.\n   * @return {String}\n   * @access protected\n   * @ignore\n   */\n  _renderTag(name, tag) {\n    const attrsNames = Object.keys(tag.attributes);\n    let attrs;\n    if (attrsNames.length) {\n      attrs = attrsNames\n      .reduce(\n        (acc, attrName) => {\n          const value = tag.attributes[attrName];\n          return [...acc, `${attrName}=\"${value}\"`];\n        },\n        []\n      )\n      .join(' ');\n      attrs = ` ${attrs}`;\n    } else {\n      attrs = '';\n    }\n\n    return [\n      `<${name}${attrs}>`,\n      tag.content,\n      `</${name}>`,\n    ]\n    .join('\\n');\n  }\n}\n/**\n * The service provider that once registered on {@link SvelteExtend} will save the class\n * {@link SFCData} as the `sfcData` service.\n * @type {Provider}\n */\nconst sfcData = provider((app) => {\n  app.set('sfcData', () => SFCData);\n});\n\nmodule.exports = {\n  SFCData,\n  sfcData,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/services/sfcData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "SFCData",
    "memberof": "src/services/sfcData.js",
    "static": true,
    "longname": "src/services/sfcData.js~SFCData",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/sfcData.js",
    "importStyle": "{SFCData}",
    "description": "A basic class to handle single file components' (SFC) data and rendering for the app.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "new",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/sfcData.js~SFCData.new",
    "access": "public",
    "description": "A shorthand to create a new instance of the class.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The file path of the component for which the data will be saved. This\n                         is later used when merging components in order to fix relative paths\n                         between files."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCData"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The file path of the component for which the data will be saved. This\n                         is later used when merging components in order to fix relative paths\n                         between files."
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "_filepath",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_filepath",
    "access": "protected",
    "description": "The path of the SFC.",
    "lineNumber": 31,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_directory",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_directory",
    "access": "protected",
    "description": "The directory where the SFC is located.",
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "_markup",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_markup",
    "access": "protected",
    "description": "The HTML markup of the SFC; this doesn't include scripts and styles.",
    "lineNumber": 45,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "_scripts",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_scripts",
    "access": "protected",
    "description": "The list of script tags the SFC has.",
    "lineNumber": 52,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array<SFCTag>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "_moduleScripts",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_moduleScripts",
    "access": "protected",
    "description": "The list of module script tags (those with the `context=\"module\"` attribute) the SFC has.",
    "lineNumber": 59,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array<SFCTag>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "_styles",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_styles",
    "access": "protected",
    "description": "The list of style tags the SFC has.",
    "lineNumber": 66,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array<SFCTag>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "_baseFile",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_baseFile",
    "access": "protected",
    "description": "In case the SFC extends another SFC, this will be a reference for it.",
    "lineNumber": 73,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "SFCData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "_extendTagAttributes",
    "memberof": "src/services/sfcData.js~SFCData",
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_extendTagAttributes",
    "access": "protected",
    "description": "In case the SFC extends another SFC, this dictionary will contain the information of the\n`<extend />` tag.",
    "lineNumber": 81,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "addBaseFileData",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#addBaseFileData",
    "access": "public",
    "description": "Adds the information of a SFC this one is extending.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "SFCData"
        ],
        "spread": false,
        "optional": false,
        "name": "fileData",
        "description": "The SFC information."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "extendTagAttributes",
        "description": "The attributes of this SFC `<extend />` tag."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If this SFC already has a base SFC already set."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If the `fileData` is not an instance of {@link SFCData}."
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "addMarkup",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#addMarkup",
    "access": "public",
    "description": "Adds HTML markup for the SFC. If there's already markup saved, it will just append it.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The HTML code to add."
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "addScript",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#addScript",
    "access": "public",
    "description": "Adds a script tag information to the SFC.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The contents of the tag."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "A dictionary with the tag attributes."
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "addStyle",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#addStyle",
    "access": "public",
    "description": "Adds a style tag information to the SFC.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The contents of the tag."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "A dictionary with the tag attributes."
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "render",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#render",
    "access": "public",
    "description": "Renders the whole SFC information into a string, so it can be saved on a file.",
    "lineNumber": 139,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "get",
    "name": "filepath",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#filepath",
    "access": "public",
    "description": "The path of the SFC.",
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "get",
    "name": "directory",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#directory",
    "access": "public",
    "description": "The directory where the SFC is located.",
    "lineNumber": 167,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "name": "hasBaseFileData",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#hasBaseFileData",
    "access": "public",
    "description": "Whether or not the SFC extends another SFC.",
    "lineNumber": 174,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "get",
    "name": "baseFileData",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#baseFileData",
    "access": "public",
    "description": "In case the SFC extends another SFC, this will be a reference for it.",
    "lineNumber": 181,
    "type": {
      "nullable": true,
      "types": [
        "SFCData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "get",
    "name": "extendTagAttributes",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#extendTagAttributes",
    "access": "public",
    "description": "In case the SFC extends another SFC, this dictionary will contain the information of the\n`<extend />` tag.",
    "lineNumber": 189,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "get",
    "name": "markup",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#markup",
    "access": "public",
    "description": "The HTML markup of the SFC; this doesn't include scripts and styles.",
    "lineNumber": 196,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "get",
    "name": "hasStyles",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#hasStyles",
    "access": "public",
    "description": "Whether or not the SFC has style tags.",
    "lineNumber": 203,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "styles",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#styles",
    "access": "public",
    "description": "The list of style tags the SFC has.",
    "lineNumber": 210,
    "type": {
      "nullable": null,
      "types": [
        "Array<SFCTag>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "style",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#style",
    "access": "public",
    "description": "A single {@link SFCTag} that merges the contents and attributes of all the style tags\nthe SFC has.",
    "lineNumber": 218,
    "type": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "hasScripts",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#hasScripts",
    "access": "public",
    "description": "Whether or not the SFC has script tags.",
    "lineNumber": 225,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "get",
    "name": "scripts",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#scripts",
    "access": "public",
    "description": "The list of script tags the SFC has.",
    "lineNumber": 232,
    "type": {
      "nullable": null,
      "types": [
        "Array<SFCTag>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "get",
    "name": "script",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#script",
    "access": "public",
    "description": "A single {@link SFCTag} that merges the contents and attributes of all the script tags\nthe SFC has.",
    "lineNumber": 240,
    "type": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "get",
    "name": "hasModuleScripts",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#hasModuleScripts",
    "access": "public",
    "description": "Whether or not the SFC has module script tags (those with the `context=\"module\"` attribute).",
    "lineNumber": 247,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "get",
    "name": "moduleScripts",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#moduleScripts",
    "access": "public",
    "description": "The list of module script tags (those with the `context=\"module\"` attribute) the SFC has.",
    "lineNumber": 254,
    "type": {
      "nullable": null,
      "types": [
        "Array<SFCTag>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "get",
    "name": "moduleScript",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#moduleScript",
    "access": "public",
    "description": "A single {@link SFCTag} that merges the contents and attributes of all the module scripts\ntags (those with the `context=\"module\"` attribute) the SFC has.",
    "lineNumber": 262,
    "type": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "_mergeTags",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_mergeTags",
    "access": "protected",
    "description": "A utility method that merges a list of tags into a single one.",
    "lineNumber": 274,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<SFCTag>"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": "The list of tags to merge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "_renderTag",
    "memberof": "src/services/sfcData.js~SFCData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcData.js~SFCData#_renderTag",
    "access": "protected",
    "description": "Renders a {@link SFCTag} on a string.",
    "lineNumber": 312,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the tag (like `script` or `style`)."
      },
      {
        "nullable": null,
        "types": [
          "SFCTag"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "The tag information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "sfcData",
    "memberof": "src/services/sfcData.js",
    "static": true,
    "longname": "src/services/sfcData.js~sfcData",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/sfcData.js",
    "importStyle": "{sfcData}",
    "description": "The service provider that once registered on {@link SvelteExtend} will save the class\n{@link SFCData} as the `sfcData` service.",
    "lineNumber": 343,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/services/sfcParser.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\nconst fs = require('fs-extra');\n\n/**\n * @typedef {Object} SFCParserResultTag\n * @property {String}  statement  The tag full statement (match) for the tag.\n * @property {String}  name       The name of the tag.\n * @property {Boolean} closing    Whether or not the tag is for closign (`</`).\n * @property {Object}  attributes A dictionary with the tag attributes.\n * @ignore\n */\n\n/**\n * @typedef {Object} SFCParserResult\n * @property {String}             content The contents of a style/script tag.\n * @property {SFCParserResultTag} tag     The tag information.\n * @ignore\n */\n\n/**\n * @typedef {Object} SFCParserResults\n * @property {Array<SFCParserResult>} script A list of the script tags found on the SFC.\n * @property {Array<SFCParserResult>} style  A list of the style tags found on the SFC.\n * @property {String}                 markup The HTML markup of the SFC.\n * @ignore\n */\n\n/**\n * @typdef {Object} SFCParserExtendTag\n * @property {String}  statement  The tag full statement (match) for the tag.\n * @property {Object}  attributes A dictionary with the tag attributes.\n * @ignore\n */\n\n/**\n * This is the parser that reads a single file component (SFC) and transform it into a\n * {@link SFCData} object.\n */\nclass SFCParser {\n  /**\n   * @param {Class<SFCData>} sfcData The class used to create the objects with the SFC parsed\n   *                                 information.\n   */\n  constructor(sfcData) {\n    /**\n     * The class used to create the objects with the SFC parsed information.\n     * @type {Class<SFCData>}\n     * @access protected\n     * @ignore\n     */\n    this._sfcData = sfcData;\n    /**\n     * A dictionary of regular expression the parser uses.\n     * @type {Object}\n     * @property {RegExp} extendTag    The expression that detects the `<extend />` tag.\n     * @property {RegExp} attributes   A expression that matches HTML attributes (outside a tag).\n     * @property {RegExp} boolean      A expression to detect whether or not a string is actually\n     *                                 a boolean flag.\n     * @property {RegExp} relevantTags A expression that matches relevant tags for the parser from\n     *                                 a line of code.\n     * @access protected\n     * @ignore\n     */\n    this._expressions = {\n      extendTag: /<\\s*extend\\s+(.*?)\\s*\\/?>(?:\\s*<\\s*\\/\\s*extend\\s*>)?/i,\n      attributes: /([\\w-]+)(?:\\s*=\\s*['\"](.*?)['\"]|\\s*|$)/g,\n      boolean: /(?:true|false)/i,\n      relevantTags: /<\\s*(\\/\\s*)?(script|style)(.*?)>/gi,\n    };\n  }\n  /**\n   * Parses a SFC.\n   * @param {String} contents     The contents of the file.\n   * @param {String} filepath     The path of the file.\n   * @param {Number} [maxDepth=0] How many components can be extended. For example, if a file\n   *                              extends from one that extends from another and the parameter\n   *                              is set to `1`, the parsing will fail.\n   * @return {Promise<?SFCData,Error>} If the file doesn't implement the `<extend />` tag, the\n   *                                   promise will resolve with `null`.\n   */\n  parse(contents, filepath, maxDepth = 0) {\n    return this._parse(contents, filepath, maxDepth, 1);\n  }\n  /**\n   * Parses a SFC by loading the file first; after the file is loaded, the method will internally\n   * call {@link SFCParser#parse}.\n   * @param {String} filepath     The path of the file.\n   * @param {Number} [maxDepth=0] How many components can be extended. For example, if a file\n   *                              extends from one that extends from another and the parameter\n   *                              is set to `1`, the parsing will fail.\n   * @return {Promise<?SFCData,Error>} If the file doesn't implement the `<extend />` tag, the\n   *                                   promise will resolve with `null`.\n   */\n  parseFromPath(filepath, maxDepth = 0) {\n    return fs.readFile(filepath, 'utf-8')\n    .then((contents) => this.parse(contents, filepath, maxDepth));\n  }\n  /**\n   * The method that actually does the parsing. The reason this is not in {@link SFCParser#parse}\n   * is because this method can be called recursively for each \"level of extension a file has\".\n   * @param {String}              contents         The contents of the file.\n   * @param {String}              filepath         The path of the file.\n   * @param {Number}              maxDepth         How many components can be extended. For\n   *                                               example, if a file extends from one that\n   *                                               extends from another and the parameter is set\n   *                                               to `1`, the parsing will fail.\n   * @param {Number}              currentDepth     The level of depth in which a file is currently\n   *                                               being extended.\n   * @param {?SFCParserExtendTag} [extendTag=null] When this method is called internally, it's\n   *                                               because another method found an `<extend />` tag\n   *                                               by reading a file and needs the file parsed, so\n   *                                               instead of looking for the tag again, the tag\n   *                                               can be provided with this parameter.\n   * @return {Promise<?SFCData,Error>} If the file doesn't implement the `<extend />` tag, the\n   *                                   promise will resolve with `null`.\n   * @access protected\n   * @ignore\n   */\n  _parse(contents, filepath, maxDepth, currentDepth, extendTag = null) {\n    let result;\n    const useExtendTag = extendTag || this._getExtendTag(contents);\n    if (useExtendTag && useExtendTag.attributes.from) {\n      const newCurrentDepth = currentDepth + 1;\n      if (maxDepth && newCurrentDepth > maxDepth) {\n        result = Promise.reject(new Error(\n          `The file '${filepath}' can't extend from another file, the max depth ` +\n          `limit is set to ${maxDepth}`\n        ));\n      } else {\n        const filedir = path.dirname(filepath);\n        const fromFilepath = path.join(filedir, useExtendTag.attributes.from);\n        result = fs.pathExists(fromFilepath)\n        .then((exists) => {\n          let nextStep;\n          if (exists) {\n            nextStep = this._loadDataFromPath(fromFilepath, maxDepth, newCurrentDepth);\n          } else {\n            nextStep = Promise.reject(new Error(\n              `Unable to load '${useExtendTag.attributes.from}' from '${filepath}'`\n            ));\n          }\n\n          return nextStep;\n        })\n        .then((data) => {\n          const file = this._createDataObject(\n            filepath,\n            this._parseFileData(contents.replace(useExtendTag.statement, ''), filepath)\n          );\n\n          const useData = data instanceof this._sfcData ?\n            data :\n            this._createDataObject(fromFilepath, data);\n\n          file.addBaseFileData(useData, useExtendTag.attributes);\n          return file;\n        });\n      }\n    } else {\n      result = Promise.resolve(null);\n    }\n\n    return result;\n  }\n  /**\n   * Creates an instance of {@link SFCData} with the parsed results of an SFC.\n   * @param {String}           filepath      The path of the SFC.\n   * @param {SFCParserResults} parsedResults The information obtained from parsing the SFC.\n   * @return {SFCData}\n   * @access protected\n   * @ignore\n   */\n  _createDataObject(filepath, parsedResults) {\n    const data = this._sfcData.new(filepath);\n    data.addMarkup(parsedResults.markup);\n    parsedResults.script.forEach((script) => {\n      const { tag, content } = script;\n      data.addScript(content, tag.attributes);\n    });\n\n    parsedResults.style.forEach((style) => {\n      const { tag, content } = style;\n      data.addStyle(content, tag.attributes);\n    });\n\n    return data;\n  }\n  /**\n   * Loads a SFC and checks if it implements an `<extend />` tag; if it does, it calls\n   * {@link SFCParser#_parse} to parse its \"base SFC\" first; otherwise, it parses its contents\n   * directly.\n   * @param {String} filepath     The path of the file.\n   * @param {Number} maxDepth     How many components can be extended. For example, if a file\n   *                              extends from one that extends from another and the parameter\n   *                              is set to `1`, the parsing will fail.\n   * @param {Number} currentDepth The level of depth in which a file is currently being extended.\n   * @return {Promise<SFCData|SFCParserResults,Error>}\n   * @access protected\n   * @ignore\n   */\n  _loadDataFromPath(filepath, maxDepth, currentDepth) {\n    return fs.readFile(filepath, 'utf-8')\n    .then((contents) => {\n      let nextStep;\n      const extendTag = this._getExtendTag(contents);\n      if (extendTag) {\n        nextStep = this._parse(\n          contents,\n          filepath,\n          maxDepth,\n          currentDepth,\n          extendTag\n        );\n      } else {\n        nextStep = this._parseFileData(contents, filepath);\n      }\n\n      return nextStep;\n    });\n  }\n  /**\n   * Parses a SFC code and extract the information about its scripts, styling and markup.\n   * @param {String} contents The contents of the SFC.\n   * @param {String} filepath The path of the SFC.\n   * @return {SFCParserResults}\n   * @access protected\n   * @ignore\n   */\n  _parseFileData(contents, filepath) {\n    /**\n     * This will work as an accumulator that will take lines when a open tag is detected. When\n     * the closing tag is detected, all those lines will be associated to the tag, saved, and the\n     * accumulator resetted.\n     */\n    let currentLines = [];\n    // This will be the information of the currently open tag the parser found.\n    let currentOpenTag = null;\n    // The dictionary with the information the method will eventually return.\n    const result = {\n      script: [],\n      style: [],\n      markup: '',\n    };\n    /**\n     * This is a safeguard in case the parser found an open tag inside another open tag (always\n     * talking about script and style). If a tag for opening is found inside one that is already\n     * opened, its counter will increment; if a closing tag is found and it's counter is not `0`,\n     * instead of closing the tag, the counter will decrement and the tag will be handled as a\n     * \"content line\".\n     *\n     * Not the best solution, and it's a pretty edge case, but you can't use conventional HTML\n     * parsers when with the Svelte DSL in the middle... I tried.\n     */\n    const ignoreNextCounters = {\n      script: 0,\n      style: 0,\n    };\n    /**\n     * A list that will save all lines that are outside a script/style tag. They'll eventually be\n     * filtered to remove the empty ones, and joined into a string.\n     */\n    const markupLines = [];\n    // Let the parsing beging!\n    contents\n    // Separate the file by its lines.\n    .split('\\n')\n    // And for each line...\n    .forEach((line, index) => {\n      // Try to find a relevant tag for the parser, script or style.\n      const tag = this._getRelevantTag(line, index + 1, filepath);\n      if (tag) {\n        // If a tag was found, remove the tag form the line...\n        const rest = line.replace(tag.statement, '').trim();\n        /**\n         * And if the line still has content, and no tag is currently open, or another tag\n         * with the same name is open, or the tag that was removed is for closing the opened\n         * tag... consider it markup.\n         * Like the counters, this is for edge cases.\n         */\n        if (rest && (!currentOpenTag || (currentOpenTag.name !== tag.name || tag.closing))) {\n          markupLines.push(rest);\n        }\n        if (currentOpenTag) {\n          // If a tag is currently open...\n          if (currentOpenTag.name === tag.name && tag.closing) {\n            // And the tag found is for closing it...\n            if (ignoreNextCounters[tag.name]) {\n              // If the counter is not `0`, decrement it and ignore the tag, just save the line.\n              ignoreNextCounters[tag.name]--;\n              currentLines.push(line);\n            } else {\n              /**\n               * But if it's an actual closing tag, save all the accumulated lines, its reference\n               * and reset the accumulator.\n               */\n              result[currentOpenTag.name].push({\n                tag: currentOpenTag,\n                content: currentLines.join('\\n'),\n              });\n              currentOpenTag = null;\n              currentLines = [];\n            }\n          } else {\n            // But if the tag is not the one for closing, ignore it and save the line.\n            if (currentOpenTag.name === tag.name) {\n              ignoreNextCounters[tag.name]++;\n            }\n            currentLines.push(line);\n          }\n        } else {\n          // If no tag is open, send all the accumulated lines to the markup and open the tag.\n          markupLines.push(...currentLines);\n          currentLines = [];\n          currentOpenTag = tag;\n        }\n      } else {\n        // If no tag was found, just save the line.\n        currentLines.push(line);\n      }\n    });\n\n    // All lines that are not inside a tag, go to the markup.\n    if (currentLines.length) {\n      markupLines.push(...currentLines);\n    }\n\n    // Remove empty lines from the markup and transform it into text.\n    result.markup = markupLines\n    .filter((line) => !!line.trim())\n    .join('\\n');\n\n    return result;\n  }\n  /**\n   * Finds a relevant tag for the parser on a line of code.\n   * @param {String} line        The line to parse.\n   * @param {Number} lineNumber  The number of the line, on the SFC.\n   * @param {String} filepath    The path of the SFC.\n   * @return {?SFCParserResultTag}\n   * @throws {Error} If it finds two relevant tags (style/script) on the same line.\n   * @access protected\n   * @ignore\n   */\n  _getRelevantTag(line, lineNumber, filepath) {\n    let result;\n    const match = this._expressions.relevantTags.exec(line);\n    if (match) {\n      const [statement, slash, tagName, rawAttributes] = match;\n      const name = tagName.trim();\n      const closing = typeof slash !== 'undefined';\n      const attributes = this._getTagAttributes(rawAttributes);\n      result = {\n        statement,\n        name,\n        closing,\n        attributes,\n      };\n\n      if (this._expressions.relevantTags.exec(line)) {\n        const errorMessage = [\n          'The parser cant handle multiple script/style tags on the same line (sorry!)',\n          `- file: ${filepath}`,\n          `- line: ${lineNumber}`,\n          `- code: ${line}`,\n        ].join('\\n');\n        throw new Error(errorMessage);\n      }\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n  /**\n   * Finds and parses the information of an `<extend />` tag on a SFC.\n   * @param {String} contents The contents of the SFC.\n   * @return {?SFCParserExtendTag}\n   * @access protected\n   * @ignore\n   */\n  _getExtendTag(contents) {\n    let result;\n    const match = this._expressions.extendTag.exec(contents);\n    if (match) {\n      const [statement, rawAttributes] = match;\n      const attributes = this._getTagAttributes(rawAttributes);\n      result = {\n        statement,\n        attributes,\n      };\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n  /**\n   * Parses a string of HTML tag attributes into an object.\n   * If an attribute doesn't have a value, its value will be `true` (boolean, no string); and\n   * if a value is a string for a boolean (`'true'` or `'false'`), it will become a real boolean.\n   * @example\n   * console.log(parser._getTagAttributes('from=\"file\" html'));\n   * // { from: 'file', html: true }\n   * console.log(parser._getTagAttributes('from=\"file\" html=\"false\"'));\n   * // { from: 'file', html: false }\n   * @param {String} rawAttributes The attributes to parse.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getTagAttributes(rawAttributes) {\n    const result = {};\n    let match = this._expressions.attributes.exec(rawAttributes);\n    while (match) {\n      let [, name, value] = match;\n      name = name.trim();\n      if (value) {\n        value = value.trim();\n        if (value.match(this._expressions.boolean)) {\n          value = value.toLowerCase() === 'true';\n        }\n      } else {\n        value = true;\n      }\n\n      result[name] = value;\n\n      match = this._expressions.attributes.exec(rawAttributes);\n    }\n\n    return result;\n  }\n}\n/**\n * The service provider that once registered on {@link SvelteExtend} will save the an instance of\n * {@link SFCParser} as the `sfcParser` service.\n * @type {Provider}\n */\nconst sfcParser = provider((app) => {\n  app.set('sfcParser', () => new SFCParser(app.get('sfcData')));\n});\n\nmodule.exports = {\n  SFCParser,\n  sfcParser,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/services/sfcParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "typedef",
    "name": "SFCParserResultTag",
    "memberof": "src/services/sfcParser.js",
    "static": true,
    "longname": "src/services/sfcParser.js~SFCParserResultTag",
    "access": "public",
    "description": "",
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "statement",
        "description": "The tag full statement (match) for the tag."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the tag."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "closing",
        "description": "Whether or not the tag is for closign (`</`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "A dictionary with the tag attributes."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SFCParserResultTag"
    }
  },
  {
    "__docId__": 143,
    "kind": "typedef",
    "name": "SFCParserResult",
    "memberof": "src/services/sfcParser.js",
    "static": true,
    "longname": "src/services/sfcParser.js~SFCParserResult",
    "access": "public",
    "description": "",
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The contents of a style/script tag."
      },
      {
        "nullable": null,
        "types": [
          "SFCParserResultTag"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "The tag information."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SFCParserResult"
    }
  },
  {
    "__docId__": 144,
    "kind": "typedef",
    "name": "SFCParserResults",
    "memberof": "src/services/sfcParser.js",
    "static": true,
    "longname": "src/services/sfcParser.js~SFCParserResults",
    "access": "public",
    "description": "",
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<SFCParserResult>"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": "A list of the script tags found on the SFC."
      },
      {
        "nullable": null,
        "types": [
          "Array<SFCParserResult>"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "A list of the style tags found on the SFC."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "markup",
        "description": "The HTML markup of the SFC."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SFCParserResults"
    }
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "SFCParser",
    "memberof": "src/services/sfcParser.js",
    "static": true,
    "longname": "src/services/sfcParser.js~SFCParser",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/sfcParser.js",
    "importStyle": "{SFCParser}",
    "description": "This is the parser that reads a single file component (SFC) and transform it into a\n{@link SFCData} object.",
    "lineNumber": 40,
    "interface": false
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class<SFCData>"
        ],
        "spread": false,
        "optional": false,
        "name": "sfcData",
        "description": "The class used to create the objects with the SFC parsed\n                                information."
      }
    ]
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "_sfcData",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_sfcData",
    "access": "protected",
    "description": "The class used to create the objects with the SFC parsed information.",
    "lineNumber": 52,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Class<SFCData>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "_expressions",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_expressions",
    "access": "protected",
    "description": "A dictionary of regular expression the parser uses.",
    "lineNumber": 65,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "extendTag",
        "description": "The expression that detects the `<extend />` tag."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "A expression that matches HTML attributes (outside a tag)."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "boolean",
        "description": "A expression to detect whether or not a string is actually\n                                a boolean flag."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "relevantTags",
        "description": "A expression that matches relevant tags for the parser from\n                                a line of code."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "parse",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#parse",
    "access": "public",
    "description": "Parses a SFC.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "The contents of the file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "maxDepth",
        "description": "How many components can be extended. For example, if a file\n                             extends from one that extends from another and the parameter\n                             is set to `1`, the parsing will fail."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<?SFCData,Error>"
      ],
      "spread": false,
      "description": "If the file doesn't implement the `<extend />` tag, the\n                                  promise will resolve with `null`."
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "parseFromPath",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#parseFromPath",
    "access": "public",
    "description": "Parses a SFC by loading the file first; after the file is loaded, the method will internally\ncall {@link SFCParser#parse}.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "maxDepth",
        "description": "How many components can be extended. For example, if a file\n                             extends from one that extends from another and the parameter\n                             is set to `1`, the parsing will fail."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<?SFCData,Error>"
      ],
      "spread": false,
      "description": "If the file doesn't implement the `<extend />` tag, the\n                                  promise will resolve with `null`."
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "_parse",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_parse",
    "access": "protected",
    "description": "The method that actually does the parsing. The reason this is not in {@link SFCParser#parse}\nis because this method can be called recursively for each \"level of extension a file has\".",
    "lineNumber": 120,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "The contents of the file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxDepth",
        "description": "How many components can be extended. For\n                                              example, if a file extends from one that\n                                              extends from another and the parameter is set\n                                              to `1`, the parsing will fail."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentDepth",
        "description": "The level of depth in which a file is currently\n                                              being extended."
      },
      {
        "nullable": true,
        "types": [
          "SFCParserExtendTag"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "extendTag",
        "description": "When this method is called internally, it's\n                                              because another method found an `<extend />` tag\n                                              by reading a file and needs the file parsed, so\n                                              instead of looking for the tag again, the tag\n                                              can be provided with this parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<?SFCData,Error>"
      ],
      "spread": false,
      "description": "If the file doesn't implement the `<extend />` tag, the\n                                  promise will resolve with `null`."
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "_createDataObject",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_createDataObject",
    "access": "protected",
    "description": "Creates an instance of {@link SFCData} with the parsed results of an SFC.",
    "lineNumber": 174,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the SFC."
      },
      {
        "nullable": null,
        "types": [
          "SFCParserResults"
        ],
        "spread": false,
        "optional": false,
        "name": "parsedResults",
        "description": "The information obtained from parsing the SFC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCData"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "_loadDataFromPath",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_loadDataFromPath",
    "access": "protected",
    "description": "Loads a SFC and checks if it implements an `<extend />` tag; if it does, it calls\n{@link SFCParser#_parse} to parse its \"base SFC\" first; otherwise, it parses its contents\ndirectly.",
    "lineNumber": 202,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxDepth",
        "description": "How many components can be extended. For example, if a file\n                             extends from one that extends from another and the parameter\n                             is set to `1`, the parsing will fail."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentDepth",
        "description": "The level of depth in which a file is currently being extended."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<SFCData|SFCParserResults,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "_parseFileData",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_parseFileData",
    "access": "protected",
    "description": "Parses a SFC code and extract the information about its scripts, styling and markup.",
    "lineNumber": 230,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "The contents of the SFC."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the SFC."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SFCParserResults"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "_getRelevantTag",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_getRelevantTag",
    "access": "protected",
    "description": "Finds a relevant tag for the parser on a line of code.",
    "lineNumber": 345,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "The line to parse."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lineNumber",
        "description": "The number of the line, on the SFC."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the SFC."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "SFCParserResultTag"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If it finds two relevant tags (style/script) on the same line."
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_getExtendTag",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_getExtendTag",
    "access": "protected",
    "description": "Finds and parses the information of an `<extend />` tag on a SFC.",
    "lineNumber": 382,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "The contents of the SFC."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "SFCParserExtendTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_getTagAttributes",
    "memberof": "src/services/sfcParser.js~SFCParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/sfcParser.js~SFCParser#_getTagAttributes",
    "access": "protected",
    "description": "Parses a string of HTML tag attributes into an object.\nIf an attribute doesn't have a value, its value will be `true` (boolean, no string); and\nif a value is a string for a boolean (`'true'` or `'false'`), it will become a real boolean.",
    "examples": [
      "console.log(parser._getTagAttributes('from=\"file\" html'));\n// { from: 'file', html: true }\nconsole.log(parser._getTagAttributes('from=\"file\" html=\"false\"'));\n// { from: 'file', html: false }"
    ],
    "lineNumber": 412,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rawAttributes",
        "description": "The attributes to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "sfcParser",
    "memberof": "src/services/sfcParser.js",
    "static": true,
    "longname": "src/services/sfcParser.js~sfcParser",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/services/sfcParser.js",
    "importStyle": "{sfcParser}",
    "description": "The service provider that once registered on {@link SvelteExtend} will save the an instance of\n{@link SFCParser} as the `sfcParser` service.",
    "lineNumber": 440,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/typdef.js",
    "content": "/**\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n */\n\n/**\n * @external {Class}\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\n */\n\n/**\n * @typedef {Object} SFCTag\n * @property {String} contents   The content of the tag.\n * @property {Object} attributes A dictionary of the tag attributes and their values.\n */\n\n/**\n * @typedef {function} ProviderRegisterMethod\n * @param {Jimple} app\n * A reference to the dependency injection container.\n */\n\n/**\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called when registering the provider.\n */\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/typdef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "external",
    "name": "Jimple",
    "externalLink": "https://yarnpkg.com/en/package/jimple",
    "memberof": "src/typdef.js",
    "static": true,
    "longname": "src/typdef.js~Jimple",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 161,
    "kind": "external",
    "name": "Class",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
    "memberof": "src/typdef.js",
    "static": true,
    "longname": "src/typdef.js~Class",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 162,
    "kind": "typedef",
    "name": "SFCTag",
    "memberof": "src/typdef.js",
    "static": true,
    "longname": "src/typdef.js~SFCTag",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "The content of the tag."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "A dictionary of the tag attributes and their values."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SFCTag"
    }
  },
  {
    "__docId__": 163,
    "kind": "typedef",
    "name": "ProviderRegisterMethod",
    "memberof": "src/typdef.js",
    "static": true,
    "longname": "src/typdef.js~ProviderRegisterMethod",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimple"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "A reference to the dependency injection container."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProviderRegisterMethod"
    }
  },
  {
    "__docId__": 164,
    "kind": "typedef",
    "name": "Provider",
    "memberof": "src/typdef.js",
    "static": true,
    "longname": "src/typdef.js~Provider",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProviderRegisterMethod"
        ],
        "spread": false,
        "optional": false,
        "name": "register",
        "description": "The method that gets called when registering the provider."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Provider"
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/webpack.js",
    "content": "const loaderUtils = require('loader-utils');\nconst app = require('./index');\n/**\n * The loader that implements {@link SvelteExtend} for webpack.\n * The only option the loader has is `allowedMaxDepth`: How many components level can be extended.\n * For example, if a file extends from one that extends from another and this is set to `1`, the\n * parsing will fail.\n * This loader is async.\n * @param {String} source The contents of the file to process.\n */\nmodule.exports = function svelteExtendWebpackLoader(source) {\n  const { allowedMaxDepth = 0 } = loaderUtils.getOptions(this) || {};\n  const callback = this.async();\n  app.extend(source, this.resourcePath, allowedMaxDepth)\n  .then((formatted) => {\n    callback(null, formatted);\n  })\n  .catch((error) => {\n    callback(error);\n  });\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/svelte-extend/src/webpack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "svelteExtendWebpackLoader",
    "memberof": "src/webpack.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/webpack.js~svelteExtendWebpackLoader",
    "access": "public",
    "export": true,
    "importPath": "svelte-extend/src/webpack.js",
    "importStyle": "svelteExtendWebpackLoader",
    "description": "The loader that implements {@link SvelteExtend} for webpack.\nThe only option the loader has is `allowedMaxDepth`: How many components level can be extended.\nFor example, if a file extends from one that extends from another and this is set to `1`, the\nparsing will fail.\nThis loader is async.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The contents of the file to process."
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# svelte-extend\n\n[![Travis](https://img.shields.io/travis/homer0/svelte-extend.svg?style=flat-square)](https://travis-ci.org/homer0/svelte-extend)\n[![Coveralls github](https://img.shields.io/coveralls/github/homer0/svelte-extend.svg?style=flat-square)](https://coveralls.io/github/homer0/svelte-extend?branch=master)\n[![David](https://img.shields.io/david/homer0/svelte-extend.svg?style=flat-square)](https://david-dm.org/homer0/svelte-extend)\n[![David](https://img.shields.io/david/dev/homer0/svelte-extend.svg?style=flat-square)](https://david-dm.org/homer0/svelte-extend)\n\nCreate new Svelte components by extending existing ones\n\n## Introduction\n\n> **Disclaimer:** I'm aware that this doesn't existed for a reason, and while I consider the opinion of the author of Svelte to be valid, I needed this for a very specific case. If you are interested on using this library, I would recommend you to **think hard if you really need it**.\n> \n> Extending single file components is not the same as OOP inheritance, there's a lot of things that end up hidden (because there's no `class`) and your IDE (unless someone integrates this on an IDE :P) won't be able to warn you about.\n\nThis library introduces an `extend` HTML tag that you'll be able to use on your `.svelte` files in order to indicate that the component you are creating extends from another one:\n\n```html\n<extend from=\"./base-component.svelte\" />\n<strong>My new component</strong>\n```\n\n## Usage\n\nAs shown on the introduction snippet, you can reference a base component using the `extend` tag and then add custom markup to it.\n\nBy default, an extended component will only take the `script` and `style` tags from the base component and use its own markup (HTML)... but you can change all of that.\n\n### HTML\n\nIf you want to also bring the HTML from the base component, you just need to add the `html` attribute to the tag:\n\n```html\n<extend from=\"./base-component.svelte\" html />\n<strong>My new component</strong>\n```\n\nNow, the generated component will have first the base component HTML and then the one you added.\n\nIf you would want to do it the other way around, first the extended HTML and then the one from the base component, you just need to set the value of the `html` attribute to `before`\n\n```html\n<extend from=\"./base-component.svelte\" html=\"before\" />\n<strong>My new component</strong>\n```\n\n### Scripts\n\nBy default, if the extended component doesn't have a `script` tag, the generated component will have the ones from the base; but if you want to overwrite it, you just need to create it:\n\n```html\n<extend from=\"./base-component.svelte\" html=\"before\" />\n<script>\n  // ...\n</script>\n<strong>My new component</strong>\n```\n\nDone, if the base one had a `script` tag, it won't be included on the generated component.\n\nNow, what if you want to add variables or change the way function works from the base component? Well, you can add a `extend` attribute to the extended `script` tag:\n\n```html\n<extend from=\"./base-component.svelte\" html=\"before\" />\n<script extend>\n  // ...\n</script>\n<strong>My new component</strong>\n```\n\nThe library will put the contents of the base `script` tag first, then the contents of the `extended` tag and parse & format the code to remove duplicated declarations, and move all the `import`/`require` statements to the top.\n\n> **NOTE:** This applies for both, regular `script` tags and `script` tags with the `context=\"module\"` attribute.\n\n### Styles\n\nThese works in way that is like a mix of scripts and markup: By default, if the extended component doesn't have a `style` tag, the generated component will have the one from the base; but if you want to overwrite it, like for scripts, you just need to create it:\n\n```html\n<extend from=\"./base-component.svelte\" html=\"before\" />\n<style>\n  /**\n   * ...\n   */\n</style>\n<strong>My new component</strong>\n```\n\nBy creating it, you are telling the library that even if the base component has a `style` tag, you want to use the one from the extended component.\n\nAnd yes, you can extend it by adding a `extend` attribute:\n\n```html\n<extend from=\"./base-component.svelte\" html=\"before\" />\n<style extend>\n  /**\n   * ...\n   */\n</style>\n<strong>My new component</strong>\n```\n\nBut this attribute works like the one for HTML, you can set the position in which you want to add the base styling:\n\n```html\n<extend from=\"./base-component.svelte\" html=\"before\" />\n<style extend=\"before\">\n  /**\n   * ...\n   */\n</style>\n<strong>My new component</strong>\n```\n\nNow the extended code will come before the one from the base component.\n\n## Integrations\n\nEverything is great, but you are probably wondering how do you add it to a project.\n\n### webpack\n\nThe library includes a webpack loader that you can add to your configuration:\n\n```js\n{\n  test: /\\.svelte$/i,\n  use: [\n    // The official one, to actually compile the `.svelte` files.\n    {\n      loader: 'svelte-loader',\n      options: { ... },\n    },\n    // The one for `svelte-extend`\n    {\n      loader: 'svelte-extend/webpack',\n      options: {\n        allowedMaxDepth: 0, // No limit.\n      },\n    },\n  ],\n}\n```\n\n#### Options\n\n- `allowedMaxDepth`: By default, the library allows you to also extend from already extended components, but if you want to limit how much \"levels\" a component could extend from, you can use this parameter. The default value is `0`, meaning it has no limit.\n\n### Rollup\n\nThe library also includes a Rollup plugin:\n\n```js\nconst svelteExtend = require('svelte-extend/rollup');\n...\n\nmodule.exports = {\n  ...\n  plugins: [\n    ...,\n    // The official one, to actually compile the `.svelte` files.\n    svelte({ ... }),\n    // The one for `svelte-extend`\n    svelteExtend({\n      include: [], // Files to include.\n      exclude: [], // Files to exclude.\n      allowedMaxDepth: 0, // No limit.\n    });\n  ],\n};\n```\n\n#### Options\n\n- `include` & `exclude`: The basic options for almost all Rollup plugins, to define which files should and shouldn't be processed by a plugin.\n- `allowedMaxDepth`: By default, the library allows you to also extend from already extended components, but if you want to limit how much \"levels\" a component could extend from, you can use this parameter. The default value is `0`, meaning it has no limit.\n\n## Development\n\n### NPM/Yarn tasks\n\n| Task       | Description                         |\n|------------|-------------------------------------|\n| `test`     | Run the project unit tests.         |\n| `lint`     | Lint the modified files.            |\n| `lint:all` | Lint the entire project code.       |\n| `docs`     | Generate the project documentation. |\n| `todo`     | List all the pending to-do's.       |\n\n### Repository hooks\n\nI use [husky](https://yarnpkg.com/en/package/husky) to automatically install the repository hooks so the code will be tested and linted before any commit, and the dependencies updated after every merge. The configuration is on the `husky` property of the `package.json` and the hooks' files are on `./utils/hooks`.\n\n### Testing\n\nI use [Jest](https://facebook.github.io/jest/) with [Jest-Ex](https://yarnpkg.com/en/package/jest-ex) to test the project. The configuration file is on `./.jestrc.json`, the tests are on `./tests` and the script that runs it is on `./utils/scripts/test`.\n\n### Linting\n\nI use [ESlint](http://eslint.org) with [my own custom configuration](http://yarnpkg.com/en/package/eslint-plugin-homer0) to validate all the JS code. The configuration file for the project code is on `./.eslintrc` and the one for the tests is on `./tests/.eslintrc`. There's also an `./.eslintignore` to exclude some files on the process. The script that runs it is on `./utils/scripts/lint`.\n\n### Documentation\n\nI use [ESDoc](http://esdoc.org) to generate HTML documentation for the project. The configuration file is on `./.esdoc.json` and the script that runs it is on `./utils/scripts/docs`.\n\n### To-Dos\n\nI use `@todo` comments to write all the pending improvements and fixes, and [Leasot](https://yarnpkg.com/en/package/leasot) to generate a report. The script that runs it is on `./utils/scripts/todo`.",
    "longname": "/Users/homer0/CODE/node/svelte-extend/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"svelte-extend\",\n  \"description\": \"Create new Svelte components by extending existing ones\",\n  \"homepage\": \"https://homer0.github.io/svelte-extend/\",\n  \"version\": \"0.0.1\",\n  \"repository\": \"homer0/svelte-extend\",\n  \"author\": \"Leonardo Apiwan (@homer0) <me@homer0.com>\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"svelte\",\n    \"extend\",\n    \"sfc\",\n    \"webpack\",\n    \"rollup\"\n  ],\n  \"dependencies\": {\n    \"babylon\": \"^6.18.0\",\n    \"@babel/traverse\": \"7.7.2\",\n    \"@babel/types\": \"7.7.2\",\n    \"@babel/generator\": \"7.7.2\",\n    \"fs-extra\": \"^8.1.0\",\n    \"jimple\": \"^1.5.0\",\n    \"loader-utils\": \"^1.2.3\",\n    \"rollup-pluginutils\": \"^2.8.2\",\n    \"wootils\": \"^2.6.5\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-env\": \"7.7.1\",\n    \"@babel/core\": \"7.7.2\",\n    \"@babel/plugin-transform-runtime\": \"7.6.2\",\n    \"coveralls\": \"^3.0.7\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"1.0.4\",\n    \"eslint\": \"^6.6.0\",\n    \"eslint-plugin-homer0\": \"^2.0.1\",\n    \"husky\": \"^3.0.9\",\n    \"jasmine-expect\": \"^4.0.3\",\n    \"jest-ex\": \"^6.1.1\",\n    \"jest-cli\": \"^24.9.0\",\n    \"leasot\": \"^9.0.0\"\n  },\n  \"engine-strict\": true,\n  \"engines\": {\n    \"node\": \">=8.10.0\",\n    \"npm\": \">=3.0.0\"\n  },\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"test\": \"./utils/scripts/test\",\n    \"lint\": \"./utils/scripts/lint\",\n    \"lint:all\": \"./utils/scripts/lint-all\",\n    \"docs\": \"./utils/scripts/docs\",\n    \"todo\": \"./utils/scripts/todo\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"./utils/hooks/pre-commit\",\n      \"post-merge\": \"./utils/hooks/post-merge\"\n    }\n  }\n}\n",
    "longname": "/Users/homer0/CODE/node/svelte-extend/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]